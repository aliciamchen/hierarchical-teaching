var params = {
  alpha: 1,
  hypothesisLabels: ["A", "B", "C", "D"],
  problem: {
    A: [0, 0, 1, 1, 1, 1, 1],
    B: [0, 1, 0, 1, 1, 1, 0],
    C: [0, 1, 1, 0, 1, 1, 0],
    D: [1, 1, 0, 1, 1, 1, 1],
  },
};

var hypothesisPrior = Categorical({ vs: params.hypothesisLabels });

var findUniqueElements = function (array1, array2) {
  // Find elements in array1 that are not in array2
  var isInSecondArray = function (element, secondArray) {
    return reduce(
      function (current, acc) {
        return acc || element === current; // Return true if element is found, else keep previous value
      },
      false,
      secondArray
    ); // Start with false (not found)
  };

  var diff = filter(function (item) {
    return !isInSecondArray(item, array2); // Only include items not found in array2
  }, array1);

  return diff;
};

var sampleNextExample = function (concept, past_examples) {
  var findConsistentExamples = function (concept, past_examples) {
    // given an array of past examples and a concept, return possible next examples
    var indicesOfOnes = filter(function (x) {
      return concept[x] === 1;
    }, _.range(concept.length)); // indices of true concept
    var possibleNextExamples = findUniqueElements(indicesOfOnes, past_examples);
    return possibleNextExamples;
  };

  var possibleNextExamples = findConsistentExamples(concept, past_examples);
  return uniformDraw(possibleNextExamples);
};

var isInConcept = function (concept, examples) {
  return all(function (x) {
    return concept[x] === 1;
  }, examples); //concept[example] === 1;
};

var L0 = cache(function (examples, problem, learnerPrior) {
  return Infer({ method: "enumerate" }, function () {
    var H = sample(learnerPrior);
    var consistentHypotheses = filter(function (H) {
      return isInConcept(problem[H], examples);
    }, params.hypothesisLabels);
    factor(
      consistentHypotheses.length === 0
        ? -100
        : Categorical({ vs: consistentHypotheses }).score(H)
    );
    return H;
  });
});

var S1 = cache(function (hypothesis, problem, past_examples, learnerPrior) {
  return Infer({ method: "enumerate" }, function () {
    var nextExample = sampleNextExample(problem[hypothesis], past_examples);
    factor(
      params.alpha *
        L0(past_examples.concat(nextExample), problem, learnerPrior).score(
          hypothesis
        )
    );
    return nextExample;
  });
});

var updateLearnerPosterior = cache(function (
  example,
  past_examples,
  problem,
  learnerPrior
) {
  return Infer({ method: "enumerate" }, function () {
    var H = sample(learnerPrior);
    factor(
      !isInConcept(problem[H], past_examples.concat(example))
        ? -100
        : S1(H, problem, past_examples, learnerPrior).score(example)
    );
    return H;
  });
});

var sequential = cache(function (condition, problem) {
  return Infer({ method: "enumerate" }, function () {
    if (condition == "feedback") {
      var empiricalPrior = Categorical({ vs: params.hypothesisLabels }); // start with uniform prior. In practice this is participants' empirical prior
      var firstExample = sample(S1("A", problem, [], empiricalPrior));
      var firstFeedback = updateLearnerPosterior(
        firstExample,
        [],
        problem,
        empiricalPrior
      );
      var secondExample = sample(
        S1("A", problem, [firstExample], firstFeedback)
      );
      var secondFeedback = updateLearnerPosterior(
        secondExample,
        [firstExample],
        problem,
        firstFeedback
      );
      var thirdExample = sample(
        S1("A", problem, [firstExample, secondExample], secondFeedback)
      );
      var thirdFeedback = updateLearnerPosterior(
        thirdExample,
        [firstExample, secondExample],
        problem,
        secondFeedback
      );

      return {
        firstExample: firstExample,
        firstFeedback: sample(firstFeedback),
        secondExample: secondExample,
        secondFeedback: sample(secondFeedback),
        thirdExample: thirdExample,
        thirdFeedback: sample(thirdFeedback),
      };
    } else if (condition == "no_feedback") {
      var empiricalPrior = Categorical({ vs: params.hypothesisLabels }); // start with uniform prior. In practice this is participants' empirical prior

      var firstExample = sample(S1("A", problem, [], empiricalPrior));
      var secondExample = sample(
        S1("A", problem, [firstExample], empiricalPrior)
      );
      var thirdExample = sample(
        S1("A", problem, [firstExample, secondExample], empiricalPrior)
      );
      console.log([firstExample, secondExample, thirdExample]);
      var thirdFeedback = updateLearnerPosterior(
        thirdExample,
        [firstExample, secondExample],
        problem,
        empiricalPrior
      );
      return {
        firstExample: firstExample,
        secondExample: secondExample,
        thirdExample: thirdExample,
        thirdFeedback: sample(thirdFeedback),
      };
    }
  });
});

// viz.marginals(sequential('feedback', params.problem))
// viz.marginals(sequential('no_feedback', params.problem))

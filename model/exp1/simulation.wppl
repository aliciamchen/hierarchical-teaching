var params = {
    participants: 193,
    speakerAlpha: argv.speakerAlpha,
    exampleCost: argv.exampleCost,
    trueThetas: [0.3, 0.7], // true coin flip weight
    maxFlips: 70,
    scenarios: ['seqFeedback', 'nonSeqFull', 'nonSeqPartial', 'seqNoFeedback'],
    learnerHypers: [
        {heads: 9, tails: 1},
        {heads: 1, tails: 9}
    ]
};

console.log(params)

var round = function (num, precision) {
    Number.parseFloat(num.toFixed(precision));
};

var Beta_disc = cache(function (hypers) {
    return Infer({ method: 'enumerate' }, function () {
        var n = uniformDraw(_.range(0, 1, 0.01));
        var bta = Beta({
            a: hypers.a == 0 ? 1 : hypers.a,
            b: hypers.b == 0 ? 1 : hypers.b
        });
        factor(bta.score(n));
        return round(n, 2);
    })
});

// define priors for teacher and learner
var islandPrior = Categorical({vs: params.trueThetas})
var speakerPrior = Categorical({vs: params.learnerHypers})

// literal learner using conjugate prior
var L0 = cache(function (examples) {
    // conjugate prior is just Beta(a_p + a_new, b_p + b_new)
    // (accumulate heads/tails across examples)
    var learnerPosterior = Beta_disc({
        a: _.toNumber(sum(_.map(examples, 'heads'))),
        b: _.toNumber(sum(_.map(examples, 'tails')))
    })

    return learnerPosterior;
});


// pragmatic speaker with fixed beliefs about what listener has seen
var S_fixed = cache(function(previousData, trueTheta) {
    return Infer({ method: 'enumerate' }, function () {
        var nExamples = uniformDraw(_.range(1, params.maxFlips + 1));

        // sample how many heads to show
        var nHeads = uniformDraw(_.range(nExamples + 1));
        var examples = {heads: nHeads, tails: nExamples - nHeads};

        // utility based on resulting beliefs
        var speakerUtility = (1 - params.exampleCost) * L0(previousData.concat([examples])).score(trueTheta) - params.exampleCost * nExamples
        factor(params.speakerAlpha * speakerUtility)
        return examples
    });
});

// pragmatic speaker uncertain about learner
var S_uncertain = cache(function(beliefs, previousData, theta) {
    return Infer({ method: 'enumerate' }, function() {
        // sample examples
        var nExamples = uniformDraw(_.range(1, params.maxFlips + 1));
        var nHeads = uniformDraw(_.range(nExamples + 1));
        var examples = {heads: nHeads, tails: nExamples - nHeads};


        // utility based on resulting beliefs
        var speakerUtility = expectation(beliefs, function(hyper) {
            return (1 - params.exampleCost) * L0(previousData.concat([hyper, examples])).score(theta) - params.exampleCost * nExamples
        })

        factor(params.speakerAlpha * speakerUtility)

        return examples
    })
});


var L0Mean = function (examples, learnerHypers) {
    return (learnerHypers.heads + examples.heads) / (learnerHypers.heads + learnerHypers.tails + examples.heads + examples.tails)
}

// speaker updates belief in learner hypers based on guess from learner
var updateSpeakerPosterior = cache(function (examples, guess) {
    return Infer({ method: 'enumerate' }, function () {
        var learnerHypers = sample(speakerPrior);

        var learnerDist = L0(examples.concat(learnerHypers));

        observe(learnerDist, round(guess, 2))
        return learnerHypers;

        // var learnerEstimate = L0Mean(examples[0], learnerHypers)

        // condition(learnerEstimate == guess)
        // return learnerHypers;
    })
});




var sequential = cache(function (scenario, coinWeight, learnerHypers) {
    return Infer({ method: 'enumerate' }, function () {
        var step1examples = sample(S_uncertain(speakerPrior, [], coinWeight))
        var learnerFeedback = L0Mean(step1examples, learnerHypers)
        // console.log(learnerFeedback)
        var speakerPosterior = (scenario === 'seqFeedback' ?
            updateSpeakerPosterior([step1examples], learnerFeedback) :
            speakerPrior)
        var step2examples = sample(S_uncertain(speakerPosterior, [step1examples], coinWeight));
        return {
            step1examples: step1examples,
            step2examples: step2examples
        }
    })
})


var simulate = cache(function (scenario, coinWeight, learnerHypers) {
    if (scenario === 'nonSeqFull') {
        return S_fixed([learnerHypers], coinWeight)
    } else if (scenario === 'nonSeqPartial') {
        return S_uncertain(speakerPrior, [], coinWeight)
    } else {
        return sequential(scenario, coinWeight, learnerHypers)
    }
})


//// Simulate

var f = csv.open('./output/indiv/' + 'sa' + params.speakerAlpha + '_cw' + params.exampleCost + '.csv')
csv.writeLine('subject_id,alpha,costWeight,block_type,trial_num,theta,student_a,student_b,heads,tails', f)

var makeTrials = function () {
    return _.flattenDeep(
        mapN(function (participant) {
            return map(function (scenario) {
                return map(function (coinWeight) {
                    return map(function(classHypers) {
                        return {
                            participantID: participant,
                            scenario: scenario,
                            coinWeight: coinWeight,
                            student_a: classHypers.heads,
                            student_b: classHypers.tails
                        }
                    }, params.learnerHypers)
                }, params.trueThetas)
            }, params.scenarios)
        }, params.participants)
    )
}

var trials = makeTrials();

map(function (trial) {
    console.log('participant ' + trial.participantID)
    // console.log(trial)

    var classHypers = {heads: trial.student_a, tails: trial.student_b}

    var response = sample(simulate(trial.scenario, trial.coinWeight, classHypers))
    // console.log(response)

    if (trial.scenario === 'nonSeqFull' || trial.scenario === 'nonSeqPartial') {

        csv.writeLine([
            trial.participantID,
            params.speakerAlpha,
            params.exampleCost,
            trial.scenario,
            0,
            trial.coinWeight,
            trial.student_a,
            trial.student_b,
            response.heads,
            response.tails
        ].join(','), f)

    } else {

        csv.writeLine([
            trial.participantID,
            params.speakerAlpha,
            params.exampleCost,
            trial.scenario,
            0,
            trial.coinWeight,
            trial.student_a,
            trial.student_b,
            response.step1examples.heads,
            response.step1examples.tails
        ].join(','), f)

        csv.writeLine([
            trial.participantID,
            params.speakerAlpha,
            params.exampleCost,
            trial.scenario,
            1,
            trial.coinWeight,
            trial.student_a,
            trial.student_b,
            response.step2examples.heads,
            response.step2examples.tails
        ].join(','), f)
    }
}, trials)

csv.close(f);





var params = {
    alpha: 4,
    costWeight: 0.05,
    trueTheta: .5, // true coin flip weight
    nTeachers: 2,
	maxExamples: 20,
	teachers: ['A', 'B'],
    teacherExamples: {
		'A': {a: 4, b: 3},
		'B': {a: 3, b: 2}
	},
	learners: [1, 2],
    learnerHypers: {
        1: {a: 2, b: 8},
        2: {a: 2, b: 3}
    },
	inferOptions: { method: 'MCMC', samples: 4000 }
};

var round = function (num, precision) {
	Number.parseFloat(num.toFixed(precision));
  } ;


// discretizes a beta distribution over hypers (allows dp)
var Beta_disc = cache(function (hypers) {
	return Infer({method: 'enumerate'}, function() {
		var n = uniformDraw(_.range(0, 1, 0.01));
        var bta = Beta({ a: hypers.a == 0 ? 1 : hypers.a, 
                        b: hypers.b == 0 ? 1 : hypers.b});
		factor(bta.score(n));
        return round(n, 2);
	})
});

// literal learner
var L0 = cache(function (examples, hypers) {
	return Beta_disc({ a: hypers.a + examples.a, 
		b: hypers.b + examples.b });
});

// pragmatic speaker
var S1 = cache(function (theta, hypers) {
    return Infer({ method: 'enumerate' }, function () {
      var nExamples = uniformDraw(_.range(params.maxExamples + 1));
      var alpha = params.alpha, cw = params.costWeight;  
      var nHeads = uniformDraw(_.range(0, nExamples + 1));
      var sampledExamples = {a: nHeads, b: nExamples - nHeads};
      factor(alpha * (L0(sampledExamples, hypers).score(theta) - cw * nExamples));
      return {a: sampledExamples.a, b: sampledExamples.b};
    });
});

// pragmatic learner
var L1 = cache(function (examples, hypers) {
    return Infer({ method: 'enumerate' }, function () {
        var theta = sample(Beta_disc(hypers));
        observe(S1(theta, hypers), examples);
        return theta;
    });
});

// pragmatic learner compares teacher trustworthiness
var L = cache(function (theta, hypers) {
    return Infer({ method: 'enumerate' }, function () {
        var cw = params.costWeight;
        var teacherClass = uniformDraw(params.teachers);
        var teacher = params.teacherExamples[teacherClass];
        var nExamples = teacher.a + teacher.b + hypers.a + hypers.b;
//         TODO: is it okay to sum prior and examples and remove cost weight in this case?
//       Q: is this value of cw good enough? how to examine results to check
        factor(params.alpha * (L1(teacher, hypers).score(theta) - cw * nExamples));
        return {teacher: teacherClass};
    });
});

// viz.auto(L1(params.teachers[1], params.learnerHypers[2]));
// viz.auto(L1(params.teachers[2], params.learnerHypers[2]));
L(params.trueTheta, params.learnerHypers[1]);
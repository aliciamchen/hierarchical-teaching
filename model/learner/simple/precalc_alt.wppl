var params = {
    alpha: 4,
    costWeight: 0.05,
    trueTheta: .5, // true coin flip weight
    nTeachers: 2,
	maxExamples: 20,
	teachers: ['A', 'B'],
    teacherExamples: {
		'A': {a: 2, b: 0},
		'B': {a: 3, b: 2}
	},
	learners: [1, 2],
    learnerHypers: {
        1: {a: 2, b: 8},
        2: {a: 8, b: 2}
    },
	inferOptions: { method: 'MCMC', samples: 4000 },
	adaptiveTeacher: 'B',
	nonAdaptiveTeacher: 'A'
};

var round = function (num, precision) {
	Number.parseFloat(num.toFixed(precision));
  } ;


// discretizes a beta distribution over hypers (allows dp)
var Beta_disc = cache(function (hypers) {
	return Infer({method: 'enumerate'}, function() {
		var n = uniformDraw(_.range(0, 1, 0.01));
        var bta = Beta({ a: hypers.a == 0 ? 1 : hypers.a, 
                        b: hypers.b == 0 ? 1 : hypers.b});
		factor(bta.score(n));
        return round(n, 2);
	})
});


var L0Mean = function (examples, learnerHypers) {
    return (learnerHypers.a + examples.a) / (learnerHypers.a + learnerHypers.b + examples.a + examples.b)
};

// literal learner
var L0 = cache(function (examplesArray, learnerHypers) {
    var heads = reduce(function (example, acc) { return example.a + acc }, 0, examplesArray);
    var tails = reduce(function (example, acc) { return example.b + acc }, 0, examplesArray);
    return Beta_disc({
        a: _.toNumber(learnerHypers.a + heads),
        b: _.toNumber(learnerHypers.b + tails)
    });
});


// second example in sequential case
var S_second_ex = cache(function (first_ex, theta, posterior, nExamples) {
    return Infer({ method: 'enumerate' }, function () {
        var learnerClass = posterior;
        var learnerHypers = params.learnerHypers[learnerClass];
        var nHeads = uniformDraw(_.range(0, nExamples + 1));
        var second_ex = { a: nHeads, b: nExamples - nHeads };

        factor(params.alpha * (L0([first_ex, second_ex], learnerHypers).score(theta) 
			- params.costWeight * (first_ex.a + first_ex.b + second_ex.a + second_ex.b)));

        return second_ex;
    })
})

// after speaker sees learner's feedback after step 1, update speaker posterior over class membership
var updateSpeakerPosterior = cache(function (examples, classroomOptions, guess) {
    return Infer({ method: 'enumerate' }, function () {
        var learnerClass = uniformDraw(classroomOptions);
        var learnerHypers = params.learnerHypers[learnerClass];

        // Point estimate
        var learnerEstimate = L0Mean(examples, learnerHypers);
		var guessTheta = guess.a / (guess.a + guess.b);
        // Option 1: 'hard' condition on posterior mean (no partial credit)
        //condition(learnerEstimate === trueLearnerEstimate)
        // Option 2: 'soft' condition on posterior mean (credit for being closer)
        // observe(Gaussian({mu: learnerEstimate, sigma: 1}), reportedMean)
        // Option 3: 'soft' condition on reported mean being high-probability under imagined L0
        // (not as 'strong' as if you know the L0 is deterministically reporting posterior mean)
        // observe(L0(data, learnerHypers), reportedMean)
//         condition(learnerEstimate === guessTheta);
		factor(10 * Gaussian({mu: learnerEstimate, sigma: 1}).score(guessTheta));
        return learnerClass;
    })
});

var simulate = cache(function (guess, firstExamples, classroomOptions, theta, nExamples) 
{
	var posterior = round(expectation(updateSpeakerPosterior(firstExamples,classroomOptions,guess)));
    print(posterior)
	var SMean = round(expectation(marginalize
						(S_second_ex(firstExamples, theta, posterior, nExamples), 'a')), 0);
	return {a: SMean, b: nExamples - SMean}
})

simulate({a: 55, b: 45}, {a: 5, b: 5}, params.learners, 0.4, 10);
var params = {
    alpha: 5,
    costWeight: 0.1,
    trueTheta: .6, // true coin flip weight
    nTeachers: 2,
    teachers: 
	{
		1: {nHeads: 6, nExamples: 10},
		2: {nHeads: 3, nExamples: 5}
	}
};

var round = function (num, precision) {
  Number.parseFloat(num.toFixed(precision));
} ;


// discretizes a beta distribution over hypers (allows dp)
var Beta_disc = cache(function (examples) {
	return Infer({method: 'enumerate'}, function() {
		var n = uniformDraw(_.range(0, 1, 0.01));
        var bta = Beta({ a: 1 + examples.nHeads, b: 1 + examples.nExamples - examples.nHeads });
		factor(bta.score(n));
        return round(n, 2);
	})
});

// literal learner
var L0 = cache(function (examples) {
	return Beta_disc(examples);
});

// pragmatic speaker
var S1 = cache(function (theta) {
    return Infer({ method: 'enumerate' }, function () {
      var nExamples = uniformDraw(_.range(11));
      var alpha = params.alpha, cw = params.costWeight;  
      var nHeads = uniformDraw(_.range(0, nExamples + 1));
//       console.log(nHeads)
//       console.log(nExamples - nHeads)
      var sampledExamples = {nHeads: nHeads, nExamples: nExamples}
//       console.log(sampledExamples.nHeads)
//       console.log(sampledExamples.nExamples - sampledExamples.nHeads)
      factor(alpha * (L0(sampledExamples).score(theta) - cw * nExamples));
      return {nHeads: nHeads, nExamples: nExamples};
    });
});

// pragmatic learner
var L1 = cache(function (examples) {
    return Infer({ method: 'enumerate' }, function () {
        var theta = sample(Beta_disc(examples));
        observe(S1(theta), {nHeads: examples.nHeads, nExamples: examples.nExamples});
        return theta;
    });
});

// pragmatic learner compares teacher trustworthiness
var L = function (theta, teachers) {
    return Infer({ method: 'enumerate' }, function () {
        var nTeachers = params.nTeachers, cw = params.costWeight;
        var nTeacher = uniformDraw(_.range(1, nTeachers + 1));
        var teacher = teachers[nTeacher];
        teacher.nHeads / teacher.nExamples == theta ?
          factor(params.alpha * (L1(teacher).score(theta))) : 
          factor(params.alpha * (L1(teacher).score(theta) - cw * teacher.nExamples));
        return {teacher: nTeacher};
    });
};

// S1(params.trueTheta)
viz.auto(L0(params.teachers[1]))
viz.auto(L1(params.teachers[1]))
// L(params.trueTheta, params.teachers);
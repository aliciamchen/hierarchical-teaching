

var sampleWithReplacement = function (objects) {
    // first choose the number of samples to make, then uniformly choose
    var nSamples = discrete({ ps: ones([objects.length, 1]) }) + 1
    return mapN(function (x) { return categorical({ vs: objects }) }, nSamples)
}

var sampleWithoutReplacement = function (objects) {
    return sort(_.union(sampleWithReplacement(objects)))
}

var round = function (num, precision) {
    Number.parseFloat(num.toFixed(precision));
};

var Beta_disc = cache(function (hypers) {
    return Infer({ method: 'enumerate' }, function () {
        var n = uniformDraw(_.range(0, 1, 0.01));
        var bta = Beta({
            a: hypers.a == 0 ? 1 : hypers.a,
            b: hypers.b == 0 ? 1 : hypers.b
        });
        factor(bta.score(n));
        return round(n, 2);
    })
});

var params = {
    alpha: 4,
    costWeight: 0,
    trueTheta: .7, // true coin flip weight
    nExamples: 10,
    classes: [0, 1],
    trueLearnerClass: 1,
    classHypers: {
        0: { a: 2, b: 7 },
        1: { a: 7, b: 2 }
    }
};

// var L0Mean = function (examples, learnerHypers) {
//     return (learnerHypers.a + examples.heads) / (learnerHypers.a + learnerHypers.b + examples.n)
// }

// literal learner
var L0 = function (examples, learnerHypers) {
    return Beta({ a: _.toNumber(learnerHypers.a + examples.heads), b: _.toNumber(learnerHypers.b + examples.n - examples.heads) });
};


// pragmatic speaker
var S1 = function (theta, learnerHypers) {
    return Infer({ method: 'enumerate' }, function () {
        var nExamples = params.nExamples;
        var nHeads = uniformDraw(_.range(0, nExamples + 1));
        var examples = { n: nExamples, heads: nHeads };
        factor(params.alpha * (L0(examples, learnerHypers).score(theta) - params.costWeight * examples.n));
        return examples;
    });
};


// after speaker sees learner's feedback after step 1, update speaker posterior over class membership
var updateSpeakerPosterior = function (data) {
    return Infer({ method: 'MCMC', samples: 5000 }, function () {
        var learnerClass = uniformDraw(params.classes);
        var learnerHypers = params.classHypers[learnerClass];

        var learnerDist = L0(data, learnerHypers);
        var trueLearnerDist = L0(data, params.classHypers[params.trueLearnerClass])
        var learnerEstimate = sample(trueLearnerDist)

        // observe(learnerDist, learnerEstimate)

        // var learnerEstimate = L0Mean(data, learnerHypers);
        // var trueLearnerEstimate = L0Mean(data, params.classHypers[params.trueLearnerClass]);
        // condition(learnerEstimate === trueLearnerEstimate);

        return learnerClass;
    })
}

var model = function () {
    return Infer({ method: 'enumerate' }, function () {
        var learnerHypers = uniformDraw(params.classes);
        var step1examples = sample(S1(params.trueTheta, params.classHypers[learnerHypers]))
        var speakerPosterior = updateSpeakerPosterior(step1examples);
        var step2examples = sample(S1(params.trueTheta, params.classHypers[sample(speakerPosterior)]));
        // factor(L0(step2examples, params.classHypers[sample(speakerPosterior)]).score(params.trueTheta))
        return {
            step1_nHeads: step1examples.heads,
            step2_nHeads: step2examples.heads
        }
    })
}

var posterior = model()

viz.auto(posterior)
viz.marginals(posterior)
viz.table(posterior)